 List Interface: 
 _______________

 This is a child interface of the collection interface. This interface is dedicated to the data of the list type in which we can store all the ordered collection of the objects. This also allows duplicate data to be present in it. This list interface is implemented by various classes like ArrayList, Vector, Stack, etc. Since all the subclasses implement the list, we can instantiate a list object with any of these classes. For example, 
 
📝Syntax: This type of safelist can be defined as:
__________________________________________________

List <T> list = new ArrayList<> (); 
List <T> list = new LinkedList<> (); 
List <T> list = new Vector<> (); 
List <T> list = new Stack<> (); 

🤢Note: Where T is the type of the object to be stored in List 


Operations in a List interface:
_______________________________

Since List is an interface, it can be used only with a class that implements this interface. Now, let’s see how to perform a few frequently used operations on the List.  

Operation 1: Adding elements to List class using add() method
Operation 2: Updating elements in List class using set() method
Operation 3: Removing elements using remove() method

Parameters:  It takes 2 parameters, namely: 
___________________________________________

🚥add(Object): 
This method is used to add an element at the end of the List.

🚥add(int index, Object): 
This method is used to add an element at a specific index in the List

🚥set(int index, object): 
update the object at index

🚥remove(Object): 
This method is used to simply remove an object from the List. If there are multiple such objects, then the first occurrence of the object is removed.

🚥remove(int index): 
Since a List is indexed, this method takes an integer value which simply removes the element present at that specific index in the List. After removing the element, all the elements are moved to the left to fill the space and the indices of the objects are updated.

🤢Methods: There are multiple ways to iterate through the List. The most famous ways are by using the basic for loop in combination with a "get() method" to get the element at a specific index and the advanced for a loop. 

_________________________________________



Reference Link: https://www.geeksforgeeks.org/list-interface-java-examples/